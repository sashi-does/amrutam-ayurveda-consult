// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  patient
  doctor
  admin
}

enum Mode {
  online
  in_person
}

enum SlotStatus {
  available
  booked
  blocked
}

enum AppointmentStatus {
  pending
  confirmed
  completed
  cancelled
  rescheduled
}

model User {
  id         String   @id @default(uuid())
  email      String   @unique
  password   String
  firstName  String
  lastName   String
  phone      String
  role       Role     @default(patient)
  isVerified Boolean  @default(false)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  doctor       Doctor?
  appointments Appointment[]
  slotLocks    SlotLock[]
}

model Doctor {
  id              String        @id @default(uuid())
  userId          String        @unique
  user            User          @relation(fields: [userId], references: [id])
  specialization  String
  experience      Int
  consultationFee Decimal
  qualifications  Json
  rating          Decimal
  totalReviews    Int
  isActive        Boolean       @default(false)
  isApproved      Boolean       @default(false)
  slots           Slot[]
  appointments    Appointment[]
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
}


model Slot {
  id         String   @id @default(uuid())
  doctor     Doctor   @relation(fields: [doctorId], references: [id])
  doctorId   String
  startTime  DateTime
  endTime    DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  appointments Appointment[]
  slotLocks    SlotLock[]
}


model Appointment {
  id              String            @id @default(uuid())
  patientId       String
  patient         User              @relation(fields: [patientId], references: [id])
  doctorId        String
  doctor          Doctor            @relation(fields: [doctorId], references: [id])
  slotId          String
  slot            Slot              @relation(fields: [slotId], references: [id])
  status          AppointmentStatus
  mode            Mode
  consultationFee Decimal
  symptoms        String?
  meetingLink     String?
  confirmedAt     DateTime?
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
}

model SlotLock {
  id        String   @id @default(uuid())
  slotId    String
  slot      Slot     @relation(fields: [slotId], references: [id])
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  expiresAt DateTime
  createdAt DateTime @default(now())
}
